/* ** uva 10140 , Prime Distance
** At first generate the prime numbers upto 10000000 by sieve ..  Then, the technique to find the primality of 
a big num n is to divide the num by the prime numbers until less than or equal to sqrt(n) :) 
Nur Shuvo,ICE,Nstu
gmail: nurshuvo51@gmail.com*/
#include<stdio.h>
#include<math.h>
#define Max 10000000
char prime[Max+1];
long long int array1[1000000],p;
void sieve()
{
    long long int i,j,x;
    for(i=0;i<=Max;i++)
        prime[i]=0;
    prime[0]=prime[1]=1;
    for(i=4;i<=Max;i+=2)
        prime[i]=1;

    x=sqrt(Max);
    for(i=3;i<=x;i+=2){
        for(j=i*i;j<=Max;j+=i)
            prime[j]=1;
    }
}
/*task-2: Check primality of a big  number greater than Max   */
long long int is_prime(long long int n)
{
    long long int i,x,check=0;
    x=sqrt(n);
    for(i=0;i<p,array1[i]<=x;i++){
            if(n%array1[i]==0){
                check=1;
                break;
            }
            }
    return check;
}
/*task-2 ends*/
int main()
{
    sieve();
    long long int a,b,i,j,m,array[100000],rslt1,rslt2,rslt3,rslt4,min,max,count;
    /*task 1: putting the prime numbers from 2 to 10000000 in array1*/
    p=0;
    for(i=2;i<=Max;i++){
            if(prime[i]==0){
                array1[p++]=i;
            }
        }
    /*task-1 ends*/
    while(scanf("%lld %lld",&a,&b)==2){
    if(a<=Max&&b<=Max){
                        count=0;
                        m=0;
                        for(i=a;i<=b;i++){
                            if(prime[i]==0){
                                array[m++]=i;
                                count++;
                            }
                        }
                        /*calculation */
                    min=1000005;
                    max=0;
                    for(i=0;i<m-1;i++){
                        if(array[i+1]-array[i]<min){
                            min=array[i+1]-array[i];
                            rslt1=array[i];
                            rslt2=array[i+1];
                        }
                        if(array[i+1]-array[i]>max){
                            max=array[i+1]-array[i];
                            rslt3=array[i];
                            rslt4=array[i+1];
                        }
                    }
                       /*printing the final result*/
                    if(count>=2)
                    printf("%lld,%lld are closest, %lld,%lld are most distant.\n",rslt1,rslt2,rslt3,rslt4);
                    else
                        printf("There are no adjacent primes.\n");
                    }
    else{
                m=0;
                count=0;
                for(i=a;i<=b;i++){
                    if(is_prime(i)==0){
                        array[m++]=i;
                        count++;
                    }
                }
                 /* task-3: Calculation part */
                 min=1000005;
                 max=0;
                for(i=0;i<m-1;i++){
                if(array[i+1]-array[i]<min){
                    min=array[i+1]-array[i];
                    rslt1=array[i];
                    rslt2=array[i+1];
                }
                if(array[i+1]-array[i]>max){
                    max=array[i+1]-array[i];
                    rslt3=array[i];
                    rslt4=array[i+1];
                }
            }
            /*task-3 ends
            /*printing the final result*/
            if(count>=2)
            printf("%lld,%lld are closest, %lld,%lld are most distant.\n",rslt1,rslt2,rslt3,rslt4);
            else
               printf("There are no adjacent primes.\n");
    }
    }
      return 0;
}
/*thank you */
